#!/usr/bin/env node

/**
 * Script de test pour v√©rifier le Dockerfile
 * Usage: node test-dockerfile.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç Test du Dockerfile pour Render');
console.log('=' .repeat(60));

let allTestsPassed = true;

// Test 1: V√©rifier que le Dockerfile existe
console.log('\n1Ô∏è‚É£ V√©rification de l\'existence du Dockerfile...');
try {
  const dockerfilePath = path.join(__dirname, 'Dockerfile');
  if (fs.existsSync(dockerfilePath)) {
    console.log('‚úÖ Dockerfile existe');
  } else {
    console.error('‚ùå Dockerfile manquant');
    allTestsPassed = false;
  }
} catch (e) {
  console.error(`‚ùå Erreur lors de la v√©rification du Dockerfile: ${e.message}`);
  allTestsPassed = false;
}

// Test 2: V√©rifier le contenu du Dockerfile
console.log('\n2Ô∏è‚É£ V√©rification du contenu du Dockerfile...');
try {
  const dockerfilePath = path.join(__dirname, 'Dockerfile');
  const dockerfileContent = fs.readFileSync(dockerfilePath, 'utf8');
  
  // V√©rifier Node 18 Alpine
  if (dockerfileContent.includes('FROM node:18-alpine')) {
    console.log('‚úÖ Utilise Node 18 Alpine');
  } else {
    console.error('‚ùå N\'utilise pas Node 18 Alpine');
    allTestsPassed = false;
  }
  
  // V√©rifier dumb-init
  if (dockerfileContent.includes('dumb-init')) {
    console.log('‚úÖ dumb-init install√©');
  } else {
    console.error('‚ùå dumb-init non install√©');
    allTestsPassed = false;
  }
  
  // V√©rifier l'utilisateur nodejs
  if (dockerfileContent.includes('adduser -S nodejs')) {
    console.log('‚úÖ Utilisateur nodejs cr√©√©');
  } else {
    console.error('‚ùå Utilisateur nodejs non cr√©√©');
    allTestsPassed = false;
  }
  
  // V√©rifier la logique npm ci/npm install
  if (dockerfileContent.includes('if [ -f package-lock.json ]')) {
    console.log('‚úÖ Logique conditionnelle npm ci/npm install pr√©sente');
  } else {
    console.error('‚ùå Logique conditionnelle npm ci/npm install manquante');
    allTestsPassed = false;
  }
  
  // V√©rifier --only=production
  if (dockerfileContent.includes('--only=production')) {
    console.log('‚úÖ Installation des d√©pendances de production uniquement');
  } else {
    console.error('‚ùå Installation de toutes les d√©pendances');
    allTestsPassed = false;
  }
  
  // V√©rifier le port
  if (dockerfileContent.includes('EXPOSE 10000')) {
    console.log('‚úÖ Port 10000 expos√©');
  } else {
    console.error('‚ùå Port non expos√©');
    allTestsPassed = false;
  }
  
  // V√©rifier l'utilisateur non-root
  if (dockerfileContent.includes('USER nodejs')) {
    console.log('‚úÖ Utilisateur non-root configur√©');
  } else {
    console.error('‚ùå Utilisateur root utilis√©');
    allTestsPassed = false;
  }
  
} catch (e) {
  console.error(`‚ùå Erreur lors de la v√©rification du contenu: ${e.message}`);
  allTestsPassed = false;
}

// Test 3: V√©rifier package.json
console.log('\n3Ô∏è‚É£ V√©rification de package.json...');
try {
  const packagePath = path.join(__dirname, 'package.json');
  const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  
  if (packageContent.scripts && packageContent.scripts.start) {
    console.log('‚úÖ Script start d√©fini');
  } else {
    console.error('‚ùå Script start manquant');
    allTestsPassed = false;
  }
  
  if (packageContent.dependencies) {
    const requiredDeps = ['express', 'pg', 'cors', 'jsonwebtoken', 'dotenv'];
    const missingDeps = requiredDeps.filter(dep => !packageContent.dependencies[dep]);
    
    if (missingDeps.length === 0) {
      console.log('‚úÖ Toutes les d√©pendances requises pr√©sentes');
    } else {
      console.error(`‚ùå D√©pendances manquantes: ${missingDeps.join(', ')}`);
      allTestsPassed = false;
    }
  } else {
    console.error('‚ùå Aucune d√©pendance d√©finie');
    allTestsPassed = false;
  }
  
} catch (e) {
  console.error(`‚ùå Erreur lors de la v√©rification de package.json: ${e.message}`);
  allTestsPassed = false;
}

// Test 4: V√©rifier package-lock.json
console.log('\n4Ô∏è‚É£ V√©rification de package-lock.json...');
try {
  const packageLockPath = path.join(__dirname, 'package-lock.json');
  if (fs.existsSync(packageLockPath)) {
    const stats = fs.statSync(packageLockPath);
    console.log(`‚úÖ package-lock.json existe (${(stats.size / 1024).toFixed(1)} KB)`);
    console.log('   ‚Üí Le Dockerfile utilisera npm ci (plus rapide)');
  } else {
    console.log('‚ö†Ô∏è package-lock.json manquant');
    console.log('   ‚Üí Le Dockerfile utilisera npm install');
  }
} catch (e) {
  console.error(`‚ùå Erreur lors de la v√©rification de package-lock.json: ${e.message}`);
  allTestsPassed = false;
}

// Test 5: V√©rifier .dockerignore
console.log('\n5Ô∏è‚É£ V√©rification de .dockerignore...');
try {
  const dockerignorePath = path.join(__dirname, '.dockerignore');
  if (fs.existsSync(dockerignorePath)) {
    const dockerignoreContent = fs.readFileSync(dockerignorePath, 'utf8');
    
    if (!dockerignoreContent.includes('package-lock.json')) {
      console.log('‚úÖ package-lock.json non exclu par .dockerignore');
    } else {
      console.error('‚ùå package-lock.json exclu par .dockerignore');
      allTestsPassed = false;
    }
  } else {
    console.log('‚ö†Ô∏è .dockerignore manquant (optionnel)');
  }
} catch (e) {
  console.error(`‚ùå Erreur lors de la v√©rification de .dockerignore: ${e.message}`);
  allTestsPassed = false;
}

// R√©sultat final
console.log('\n' + '=' .repeat(60));
if (allTestsPassed) {
  console.log('üéâ Tous les tests sont pass√©s ! Le Dockerfile est pr√™t pour Render.');
  console.log('\nüìã Configuration Render:');
  console.log('- Source Code: AMDSIDIA / AMD_BACK_Parc');
  console.log('- Language: Docker');
  console.log('- Root Directory: backend');
  console.log('- Branch: master');
  console.log('- Region: Oregon (US West)');
  console.log('\nüîß Variables d\'environnement √† configurer:');
  console.log('- NODE_ENV=production');
  console.log('- PORT=10000');
  console.log('- DATABASE_URL=postgresql://...');
  console.log('- JWT_SECRET=votre_secret');
  console.log('- CORS_ORIGIN=https://amd-parc.onrender.com');
} else {
  console.error('‚ö†Ô∏è Des probl√®mes ont √©t√© d√©tect√©s. Veuillez les corriger.');
  process.exit(1);
}
