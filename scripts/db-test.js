#!/usr/bin/env node

/**
 * Script de test de connectivit√© √† la base de donn√©es PostgreSQL
 * Usage: node scripts/db-test.js
 */

require('dotenv').config();
const pool = require('../config/database');

async function testDatabaseConnection() {
  console.log('üîç Test de connectivit√© √† la base de donn√©es PostgreSQL');
  console.log('=' .repeat(60));
  
  try {
    // Test de connexion
    console.log('üì° Test de connexion...');
    const client = await pool.connect();
    console.log('‚úÖ Connexion √©tablie avec succ√®s');
    
    // Test de requ√™te simple
    console.log('üîç Test de requ√™te simple...');
    const result = await client.query('SELECT NOW() as current_time, version() as pg_version');
    console.log('‚úÖ Requ√™te ex√©cut√©e avec succ√®s');
    console.log(`   Heure actuelle: ${result.rows[0].current_time}`);
    console.log(`   Version PostgreSQL: ${result.rows[0].pg_version.split(' ')[0]}`);
    
    // Test des tables
    console.log('üìã Test des tables...');
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    if (tablesResult.rows.length > 0) {
      console.log('‚úÖ Tables trouv√©es:');
      tablesResult.rows.forEach(row => {
        console.log(`   - ${row.table_name}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Aucune table trouv√©e');
    }
    
    // Test des permissions
    console.log('üîê Test des permissions...');
    const permissionsResult = await client.query(`
      SELECT 
        current_user as current_user,
        current_database() as current_database,
        current_schema as current_schema
    `);
    
    console.log('‚úÖ Permissions v√©rifi√©es:');
    console.log(`   Utilisateur: ${permissionsResult.rows[0].current_user}`);
    console.log(`   Base de donn√©es: ${permissionsResult.rows[0].current_database}`);
    console.log(`   Sch√©ma: ${permissionsResult.rows[0].current_schema}`);
    
    // Lib√©rer la connexion
    client.release();
    
    console.log('\nüéâ Tous les tests de connectivit√© sont pass√©s avec succ√®s !');
    console.log('‚úÖ La base de donn√©es est op√©rationnelle');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de connectivit√©:');
    console.error(`   Message: ${error.message}`);
    console.error(`   Code: ${error.code}`);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Suggestions:');
      console.log('   - V√©rifiez que PostgreSQL est d√©marr√©');
      console.log('   - V√©rifiez la variable DATABASE_URL');
      console.log('   - V√©rifiez les param√®tres de connexion');
    } else if (error.code === '28P01') {
      console.log('\nüí° Suggestions:');
      console.log('   - V√©rifiez le nom d\'utilisateur et mot de passe');
      console.log('   - V√©rifiez la variable DATABASE_URL');
    } else if (error.code === '3D000') {
      console.log('\nüí° Suggestions:');
      console.log('   - V√©rifiez que la base de donn√©es existe');
      console.log('   - Cr√©ez la base de donn√©es si n√©cessaire');
    }
    
    process.exit(1);
  } finally {
    // Fermer le pool de connexions
    await pool.end();
  }
}

// Ex√©cution du test
if (require.main === module) {
  testDatabaseConnection().catch(console.error);
}

module.exports = { testDatabaseConnection };
